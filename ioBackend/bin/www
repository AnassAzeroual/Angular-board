let app = require('../app');
let debug = require('debug')('angular2-nodejs:server');
let http = require('http');


let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


let server = http.createServer(app);

let io = require('socket.io').listen(server);

io.on('connection', (socket) => {

  console.log('new connection made.');

  socket.on('join', function (data) {
    socket.join(data.room);
    console.log('joined the room : ' + data.room);
    // socket.broadcast.to(data.room).emit('new user joined', {user:data.user, message:'has joined this room.'});
  });


  socket.on('leave', function (data) {
    console.log(data.user + 'left the room : ' + data.room);
    socket.broadcast.to(data.room).emit('left room', {
      user: data.user,
      message: 'has left this room.'
    });
    socket.leave(data.room);
  });

  socket.on('message', function (request) {
    io.in('Room1').emit('new message', {
      response: request
    });
  });

});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {

  let port = parseInt(val, 10);

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
